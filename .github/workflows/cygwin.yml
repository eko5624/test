name: cygwin
defaults:
  run:
    shell: C:\cygwin\bin\bash.exe --noprofile --norc -o igncr -eo pipefail '{0}'
on:
  workflow_dispatch:
  #schedule:
  #- cron: '30 0 * * MON'
    
jobs:
  build:
    runs-on: windows-2022
    steps:
    - name: Install cygwin
      uses: cygwin/cygwin-install-action@master
      with:
        platform: x86_64
        install-dir: C:\cygwin
        packages: automake libtool make patch pkg-config git p7zip unzip
        
    - name: Setup git
      shell: cmd
      run: git config --global core.autocrlf input

    - name: Setup git config
      run: git config --global --add safe.directory $PWD
      
    - name: Checkout
      uses: actions/checkout@main

    - name: cygcheck
      run: cygcheck -c
      
    - name: Install GCC With MCF Toolchain
      run: |
        curl -OL https://github.com/eko5624/toolchain/releases/download/toolchain/target-gcc-mcf-13.2.1-20231227-x64-ucrt.7z
        7z x target-gcc-mcf*.7z -o/cygdrive/d && mv /cygdrive/d/target /cygdrive/d/ucrt64
        cp /cygdrive/c/Windows/System32/cmd.exe /cygdrive/d/ucrt64/bin


    - name: Install vulkan
      run: |
        git config --global --add safe.directory "$(cygpath -u "$GITHUB_WORKSPACE")" # workaround for #3408
        export PATH=/cygdrive/d/ucrt64/bin:/usr/bin:/usr/local/bin:/opt/bin
        export CFLAGS="${CFLAGS} -D__STDC_FORMAT_MACROS -DSTRSAFE_NO_DEPRECATE -Dparse_number=cjson_parse_number"
        export CPPFLAGS="${CPPFLAGS} -D__STDC_FORMAT_MACROS"
        export CXXFLAGS="${CXXFLAGS} -D__STDC_FORMAT_MACROS -fpermissive"
        git clone https://github.com/KhronosGroup/Vulkan-Headers
        git clone https://github.com/KhronosGroup/Vulkan-Loader
        cd Vulkan-Headers
        rm -rf build && mkdir build && cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_INSTALL_PREFIX=/opt \
          -DCMAKE_BUILD_TYPE=Release
        cmake --install .
        cd ../..
      
        cd Vulkan-Loader
        patch -p1 -i $srcdir/vulkan-0001-cross-compile-static-linking-hacks.patch
        rm -rf build && mkdir build && cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_INSTALL_PREFIX=/opt \
          -DCMAKE_BUILD_TYPE=Release \
          -DVULKAN_HEADERS_INSTALL_DIR="/opt" \
          -DBUILD_STATIC_LOADER=ON \
          -DBUILD_TESTS=OFF \
          -DUSE_MASM=OFF \
          -DENABLE_WERROR=OFF 
        cmake --build .
        cmake --install .
        mkdir -p /opt/lib/pkgconfig
        cp loader/libvulkan.a /opt/lib
        cp loader/vulkan_own.pc /opt/lib/pkgconfig/vulkan.pc
