name: cygwin
#defaults:
#  run:
#    shell: C:\cygwin\bin\bash.exe --noprofile --norc -o igncr -eo pipefail '{0}'
on:
  workflow_dispatch:
  #schedule:
  #- cron: '30 0 * * MON'
    
jobs:
  build:
    runs-on: windows-2022
    env:
      SHELLOPTS: igncr
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe -eo pipefail '{0}'
    steps:
    - name: Configure Git for Windows
      shell: cmd
      run: git config --global core.autocrlf input
    - name: Checkout
      uses: actions/checkout@main
    - name: Use Cygwin package cache
      uses: actions/cache/restore@main
      with:
        key: cygwin-packages-${{ github.run_id }}
        path: C:\cygwin-packages
        restore-keys: cygwin-packages-
    - name: Install cygwin
      uses: cygwin/cygwin-install-action@master
      with:
        platform: x86_64
        install-dir: C:\cygwin
        packages: automake libtool make cmake ninja pkg-config windows-default-manifest git patch p7zip unzip
        add-to-path: true
    - name: Store package cache
      uses: actions/cache/save@main
      with:
        key: cygwin-packages-${{ github.run_id }}
        path: C:\cygwin-packages      
    #- name: Setup git
    #  run: git config --global --add safe.directory /cygdrive/d/a/test/test # workaround for #3408
    - name: cygcheck
      run: cygcheck -c
      
    - name: Install GCC With MCF Toolchain
      run: |
        curl -OL https://github.com/eko5624/toolchain/releases/download/toolchain/target-gcc-mcf-13.2.1-20231227-x64-ucrt.7z
        7z x target-gcc-mcf*.7z -o/cygdrive/d && mv /cygdrive/d/target /cygdrive/d/ucrt64
        cp /cygdrive/c/Windows/System32/cmd.exe /cygdrive/d/ucrt64/bin
        rm /cygdrive/d/ucrt64/bin/cmake.exe
        rm /cygdrive/d/ucrt64/bin/ninja.exe
        
    - name: Install vulkan
      run: |
        export PATH=/usr/bin:/usr/local/bin:$(cygpath ${SYSTEMROOT})/system32:/opt/bin:/cygdrive/d/ucrt64/bin
        export CFLAGS="${CFLAGS} -D__STDC_FORMAT_MACROS -DSTRSAFE_NO_DEPRECATE -Dparse_number=cjson_parse_number"
        export CPPFLAGS="${CPPFLAGS} -D__STDC_FORMAT_MACROS"
        export CXXFLAGS="${CXXFLAGS} -D__STDC_FORMAT_MACROS -fpermissive"
        gcc -v
        git clone https://github.com/KhronosGroup/Vulkan-Headers
        git clone https://github.com/KhronosGroup/Vulkan-Loader
        cd Vulkan-Headers
        rm -rf build && mkdir build && cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
          -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ \
          -DCMAKE_INSTALL_PREFIX=/opt \
          -DCMAKE_BUILD_TYPE=Release
        cmake --install .
        cd ../..
      
        cd Vulkan-Loader
        patch -p1 -i $srcdir/vulkan-0001-cross-compile-static-linking-hacks.patch
        rm -rf build && mkdir build && cd build
        cmake .. \
          -G "Ninja" \
          -DCMAKE_C_COMPILER=gcc \
          -DCMAKE_CXX_COMPILER=g++ \
          -DCMAKE_RC_COMPILER=windres \
          -DCMAKE_ASM_COMPILER=as \
          -DCMAKE_RANLIB=ranlib \
          -DCMAKE_INSTALL_PREFIX=/opt \
          -DCMAKE_BUILD_TYPE=Release \
          -DVULKAN_HEADERS_INSTALL_DIR="/opt" \
          -DBUILD_STATIC_LOADER=ON \
          -DBUILD_TESTS=OFF \
          -DUSE_MASM=OFF \
          -DENABLE_WERROR=OFF 
        cmake --build .
        cmake --install .
        mkdir -p /opt/lib/pkgconfig
        cp loader/libvulkan.a /opt/lib
        cp loader/vulkan_own.pc /opt/lib/pkgconfig/vulkan.pc
